1.1 Programmverständnis
1.1.1 Statusregister
(Lösung mit Jasmin zur Korrektheit überprüft)

-	0001
MOV	0001
SUB	0100
MOV	0100
MUL	1100 (Bei MUL werden immer Carry und Overflow gesetzt, die anderen sind unbestimmt)
ADD	0010

1.2 Einzeloperationen
1.2.1 Addition

ADD EAX,ECX
MOV ECX, 0
RCL ECX,1
ADD EDX, ECX
ADD EDX, EBX

1.2.2 Modulo

PUSH EAX
PUSH EBX
PUSH EDX
PUSH ECX
MOV EDX, 0
MOV CL, AL
MOV EAX, 0
MOV AL, CL
MOV CL, BL
MOV EBX, 0
MOV BL, CL
DIV EBX
POP ECX
MOV CL, DL
POP EDX
POP EBX
POP EAX


1.3 Programmentwicklung
1.3.1 Byte-Wiederholung

count_byte:
	PUSH EAX
	PUSH EBX
	MOV EAX, 1
	MOV BL, [ESI]

	counter:
		CMP BL, Byte [ESI+EAX]
		JNE end
		INC EAX
		JMP counter

	end:
		MOV CL, AL
		POP EBX
		POP EAX
		RET

Andere Lösung:
count_byte:
push eax
push esi

mov al, [esi]
mov cl, 0

marke:
inc cl
inc esi
cmp al, [esi]
je marke

pop esi
pop ax
ret

1.3.2 Folge fortsetzen

sequence_step:
	PUSH ESI
	PUSH EDI
	PUSH EAX
	PUSH ECX
	MOV ECX, 0
	
	body:
		MOV AL, [ESI]
		CMP AL, 0
		JE end2
		CALL count_byte
		MOV [EDI], CL
		INC EDI
		MOV [EDI], AL
		INC EDI
		ADD ESI, ECX
		JMP body
		
	end2:
		MOV Byte [EDI], 0
		POP ECX
		POP EAX
		POP EDI
		POP ESI
		RET

1.3.3 Folge entwickeln

sequence:
	PUSH ECX
	
	body2:
		CMP CX, 0
		JE end3
		CALL sequence_step
		PUSH ESI
		PUSH EDI
		POP ESI
		POP EDI
		DEC CX
		JMP body2
		
	end3:
		POP ECX
		RET

Wer das ganze in Jasmin testen will (EIP auf die entsprechende Zeile setzen):
MOV ESI, 0
MOV EDI, 20
MOV ECX, 8
MOV Byte [ESI], 1
MOV Byte [ESI+1], 0
CALL sequence
